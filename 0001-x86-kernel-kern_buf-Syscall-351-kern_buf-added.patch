From 3655b0bf017dd0fdea3c341d5b55487dcf1a2919 Mon Sep 17 00:00:00 2001
From: Sergio Rodrigues de Oliveira Filho <eycepre@yahoo.com.br>
Date: Wed, 27 Nov 2013 14:19:24 -0200
Subject: [PATCH] x86: kernel: kern_buf: Syscall 351 (kern_buf) added.

Signed-off by: Sergio Rodrigues de Oliveira Filho <eycepre@yahoo.com.br>
Changes to be committed:
   (use "git reset HEAD <file>..." to unstage)

	modified:   mc504-linux/linux-3.12/arch/x86/kernel/Makefile
	new file:   mc504-linux/linux-3.12/arch/x86/kernel/kern_buf.c
	modified:   mc504-linux/linux-3.12/arch/x86/syscalls/syscall_32.tbl
	modified:   mc504-linux/linux-3.12/include/linux/syscalls.h
---
 mc504-linux/linux-3.12/arch/x86/kernel/Makefile    |  2 ++
 mc504-linux/linux-3.12/arch/x86/kernel/kern_buf.c  | 27 ++++++++++++++++++++++
 .../linux-3.12/arch/x86/syscalls/syscall_32.tbl    |  2 ++
 mc504-linux/linux-3.12/include/linux/syscalls.h    |  1 +
 4 files changed, 32 insertions(+)
 create mode 100644 mc504-linux/linux-3.12/arch/x86/kernel/kern_buf.c

diff --git a/mc504-linux/linux-3.12/arch/x86/kernel/Makefile b/mc504-linux/linux-3.12/arch/x86/kernel/Makefile
index a5408b9..20df01d 100644
--- a/mc504-linux/linux-3.12/arch/x86/kernel/Makefile
+++ b/mc504-linux/linux-3.12/arch/x86/kernel/Makefile
@@ -110,6 +110,8 @@ obj-$(CONFIG_EFI)			+= sysfb_efi.o
 obj-$(CONFIG_PERF_EVENTS)		+= perf_regs.o
 obj-$(CONFIG_TRACING)			+= tracepoint.o
 
+obj-y					+= kern_buf.o
+
 ###
 # 64 bit specific files
 ifeq ($(CONFIG_X86_64),y)
diff --git a/mc504-linux/linux-3.12/arch/x86/kernel/kern_buf.c b/mc504-linux/linux-3.12/arch/x86/kernel/kern_buf.c
new file mode 100644
index 0000000..4f85ef7
--- /dev/null
+++ b/mc504-linux/linux-3.12/arch/x86/kernel/kern_buf.c
@@ -0,0 +1,27 @@
+#include <linux/linkage.h>
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/uaccess.h>
+
+asmlinkage long sys_kern_buf(int mode, void *p, int *b, size_t t)
+{
+	int *j, *i, *k;
+
+	if (mode == 1) {
+		i = kmalloc(t, GFP_KERNEL);
+		copy_from_user(i, p, t);
+		copy_to_user(b, &i, sizeof(int));
+	}
+
+	else if (mode == 2) {
+		k = (void *) *b;
+		copy_to_user(p, k, t);
+	}
+
+	else if (mode == 0) {
+		k = (void *) *b;
+		kfree(k);
+	}
+
+	return *b;
+}
diff --git a/mc504-linux/linux-3.12/arch/x86/syscalls/syscall_32.tbl b/mc504-linux/linux-3.12/arch/x86/syscalls/syscall_32.tbl
index aabfb83..f681e51 100644
--- a/mc504-linux/linux-3.12/arch/x86/syscalls/syscall_32.tbl
+++ b/mc504-linux/linux-3.12/arch/x86/syscalls/syscall_32.tbl
@@ -357,3 +357,5 @@
 348	i386	process_vm_writev	sys_process_vm_writev		compat_sys_process_vm_writev
 349	i386	kcmp			sys_kcmp
 350	i386	finit_module		sys_finit_module
+351	i386	kern_buf		sys_kern_buf
+
diff --git a/mc504-linux/linux-3.12/include/linux/syscalls.h b/mc504-linux/linux-3.12/include/linux/syscalls.h
index 7fac04e..bf63a2e 100644
--- a/mc504-linux/linux-3.12/include/linux/syscalls.h
+++ b/mc504-linux/linux-3.12/include/linux/syscalls.h
@@ -847,4 +847,5 @@ asmlinkage long sys_process_vm_writev(pid_t pid,
 asmlinkage long sys_kcmp(pid_t pid1, pid_t pid2, int type,
 			 unsigned long idx1, unsigned long idx2);
 asmlinkage long sys_finit_module(int fd, const char __user *uargs, int flags);
+asmlinkage long sys_kern_buf(int mode, void *p, int *b, size_t t);
 #endif
-- 
1.8.3.2

